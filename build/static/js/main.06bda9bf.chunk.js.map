{"version":3,"sources":["components/Home.js","components/Persons.js","components/Sessions.js","components/Theme.js","components/Activity.js","components/Session.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","Component","base","Airtable","apiKey","process","Persons","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isFetching","persons","_this2","map","person","key","id","type","defaultChecked","fields","Signed","onChange","handleChange","react_router_dom","to","Name","fetchPersons","_this3","setState","prevState","updatePerson","select","view","filterByFormula","eachPage","fetchNextPage","_this4","e","objectSpread","personId","personSigned","update","err","record","console","error","Sessions","fetchSessions","fetchSessionsAsync","sessions","Container_default","Row_default","Col_default","ListGroup_default","session","Item","log","Theme","theme","fetchTheme","themeId","Id","self","find","Activity","activity","fetchActivity","activityId","themes","Themes","image","Image","url","Accordion_default","defaultActiveKey","Card_default","Toggle","as","Card","Header","eventKey","Collapse","Body","Img","variant","src","Text","Notes","components_Theme","Session","inputValue","changeInputHandler","event","target","value","newPerson","handleClick","createPerson","loadData","activeTab","handleSelect","bind","assertThisInitialized","fetchSession","match","params","sessionInfo","personInfo","Title","Subtitle","className","dist_default","format","Start","length","Tabs","activeKey","onSelect","Tab","title","placeholder","Button_default","size","onClick","Attended","includes","checked","Activities","xs","components_Activity","selectedTab","sort","field","direction","attended","array","index","indexOf","splice","concat","defineProperty","updateSession","personName","create","sessionId","App","Navbar_default","bg","Brand","href","alt","width","height","Nav_default","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06bda9bf.chunk.js","sourcesContent":["// Home.js\n\nimport React, { Component } from 'react';\n\nclass Home extends Component {\n  render() {\n    return (\n        <div>\n          <h2>Home</h2>\n          <p>A test application</p>\n        </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport Airtable from 'airtable';\nimport { Link } from 'react-router-dom';\n\nconst airTableKey = process.env.REACT_APP_AIRTABLE_API_KEY;\nconst airTableBase = process.env.REACT_APP_AIRTABLE_BASE;\nconst base = new Airtable({ apiKey: airTableKey }).base(airTableBase);\n\nclass Persons extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            isFetching: false,\n            persons: []\n        };\n    }\n\n    render() {\n        return (\n            <div>\n            \t<h2>Person</h2>\n            \t<ul>\n            \t\t{this.state.persons.map(person => \n            \t\t\t<li key={ person.id }>\n            \t\t\t\t<input \n\t\t\t\t        \t\ttype=\"checkbox\" \n\t\t\t\t        \t\tdefaultChecked={person.fields.Signed}\n\t\t\t\t        \t\tonChange={() => this.handleChange(person.id)}\n\t\t\t        \t\t/>\n            \t\t\t\t<Link to={'/person/' + person.id }>{ person.fields.Name }</Link>\n            \t\t\t</li> \n\n            \t\t)}\n                </ul>\n                <p>{this.state.isFetching ? 'Fetching persons...' : ''}</p>\n            </div>\n        )\n    }\n\n    componentDidMount() {\n        this.fetchPersons();\n        //this.timer = setInterval(() => this.fetchPersons(), 5000);\n    }\n\n    componentWillUnmount() {\n        //clearInterval(this.timer);\n        //this.timer = null;\n    }\n\n    handleChange(id) {\n  \t\tthis.setState(prevState => {\n      \t\tconst updatedPersons = prevState.persons.map(person => {\n          \tif (person.id === id) {\n              \tperson.fields.Signed = !person.fields.Signed;\n              \tthis.updatePerson(id, person.fields.Signed);\n          \t}\n          \treturn person\n\t      \t\t})\n\t      \treturn {\n\t          persons: updatedPersons\n\t      \t}\n  \t\t})\n\t}\n\n    async fetchPersons() {\n        try {\n\t    \tthis.setState({isFetching: true})\n\t\t    base('Person').select({\n\t\t    \tview: 'Grid view',\n\t\t    \tfilterByFormula: 'SEARCH(\"Coach\", {Roles})'\n\n\t\t    })\n\t\t    .eachPage(\n\t\t      (persons, fetchNextPage) => {\n\t\t        this.setState({\n\t\t          isFetching: false,\n\t\t          persons\n\t\t        });\n\t\t        fetchNextPage();\n\t\t      }\n\t\t    );\n        } catch (e) {\n            this.setState({...this.state, isFetching: false});\n        }\n    };\n\n\tupdatePerson (personId, personSigned) {\n\n\t  \tbase('Person').update(personId, {\n\t    \t\"Signed\": personSigned\n\t    \t}, function(err, record) {\n\t    \tif (err) {\n\t      \t\tconsole.error(err);\n\t      \t\treturn;\n\t    \t}\n\t  \t});\n\t}\n\n\n}\n\nexport default Persons;","import React, { Component } from 'react';\nimport Airtable from 'airtable';\nimport { Link } from 'react-router-dom';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nconst airTableKey = process.env.REACT_APP_AIRTABLE_API_KEY;\nconst airTableBase = process.env.REACT_APP_AIRTABLE_BASE;\nconst base = new Airtable({ apiKey: airTableKey }).base(airTableBase);\n\n\nclass Sessions extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            isFetching: false,\n            sessions: []\n        };\n    }\n\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <Col>\n                    \t<h2>Sessions</h2>\n                        <ListGroup>\n                    \t\t{this.state.sessions.map(session => <ListGroup.Item key={ session.id }><Link to={'/session/' + session.id }>{ session.fields.Name }</Link></ListGroup.Item> )}\n                        </ListGroup>\n                        <p>{this.state.isFetching ? 'Fetching sessions...' : ''}</p>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n\n    componentDidMount() {\n        this.fetchSessions();\n        //this.timer = setInterval(() => this.fetchSessions(), 5000);\n    }\n\n    componentWillUnmount() {\n        //clearInterval(this.timer);\n        //this.timer = null;\n    }\n\n    async fetchSessionsAsync() {\n        try {\n\t    \tthis.setState({isFetching: true})\n\t\t    base('Session').select({\n                view: 'Grid view'\n            })\n\t\t    .eachPage(\n\t\t      (sessions, fetchNextPage) => {\n\t\t        this.setState({\n\t\t          isFetching: false,\n\t\t          sessions\n\t\t        });\n\t\t        fetchNextPage();\n\t\t      }\n\t\t    );\n        } catch (e) {\n            console.log(e);\n            this.setState({...this.state, isFetching: false});\n        }\n    };\n\n    fetchSessions = this.fetchSessionsAsync;\n\n}\n\nexport default Sessions;","import React, { Component } from 'react';\nimport Airtable from 'airtable';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nconst airTableKey = process.env.REACT_APP_AIRTABLE_API_KEY;\nconst airTableBase = process.env.REACT_APP_AIRTABLE_BASE;\nconst base = new Airtable({ apiKey: airTableKey }).base(airTableBase);\n\nclass Theme extends Component {\n\t\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = { \n\t\t\ttheme: null\n\t\t}\n\t}\n\n\tasync componentDidMount() {\n\t\t//fetch the theme data here\n\t\tawait this.fetchTheme(this.props.themeId)\n\t}\n\n\trender () {\n\t\tconst theme = this.state.theme\n\t\tif (theme == null) { return null }\n\t\treturn <ListGroup.Item>{ theme.fields.Name }</ListGroup.Item>\n\t}\n\n\n\tasync fetchTheme(Id) {\n\t\tvar self = this;\n\t\tawait base('Theme').find(Id, function(err, record) {\n\t\t\tif (err) { console.error(err); return; }\n\t\t\tself.setState({ theme: record })\n\t\t\t\n\t\t});\n\t}\n\n}\n\nexport default Theme;","import React, { Component } from 'react';\nimport Airtable from 'airtable';\nimport Card from 'react-bootstrap/Card';\nimport Accordion from 'react-bootstrap/Accordion';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nimport Theme from './Theme'\n\nconst airTableKey = process.env.REACT_APP_AIRTABLE_API_KEY;\nconst airTableBase = process.env.REACT_APP_AIRTABLE_BASE;\nconst base = new Airtable({ apiKey: airTableKey }).base(airTableBase);\n\nclass Activity extends Component {\n\t\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = { \n\t\t\tactivity: null\n\t\t}\n\t}\n\n\tasync componentDidMount() {\n\t\t//fetch the activity data here\n\t\tawait this.fetchActivity(this.props.activityId)\n\t}\n\n\trender () {\n\t\tconst activity = this.state.activity\n\n\t\tif (activity == null) {return null}\n\t\tconst themes = (activity.fields.Themes) ? activity.fields.Themes : null\n\t\tconst image = (activity.fields.Image) ? activity.fields.Image[0].url : null\n\n\t\treturn <Accordion defaultActiveKey=\"0\">\n\t\t\t<Card>\n\t\t\t\t<Accordion.Toggle as={Card.Header} eventKey=\"0\">\n\t        \t\t{ activity.fields.Name }\n\t      \t\t</Accordion.Toggle>\n\t      \t\t<Accordion.Collapse eventKey=\"0\">\n\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t{ (image != null) ? <Card.Img variant=\"top\" src={ image } /> : null}\n\t\t\t\t\t\t<Card.Text>{ activity.fields.Notes }</Card.Text>\n\t\t\t\t\t</Card.Body>\n\t\t\t\t</Accordion.Collapse>\n\t\t\t</Card>\n\t\t\t<Card>\n\t\t\t\t<Accordion.Toggle as={Card.Header} eventKey=\"1\">\n\t        \t\tThemes\n\t      \t\t</Accordion.Toggle>\n\t      \t\t<Accordion.Collapse eventKey=\"1\">\n\t\t      \t\t<ListGroup variant=\"flush\">\n\t\t\t\t\t\t{(themes != null) ? activity.fields.Themes.map(themeId => <Theme key={ themeId } themeId={ themeId }></Theme>) : null }\n\t\t\t\t\t</ListGroup>\n\t\t\t\t</Accordion.Collapse>\n\t\t\t</Card>\n\t\t</Accordion>\n\t}\n\n\tasync fetchActivity(Id) {\n\t\tvar self = this;\n\t\tawait base('Activity').find(Id, function(err, record) {\n\t\t\tif (err) { console.error(err); return; }\n\t\t\tself.setState({ activity: record })\n\t\t\t\n\t\t});\n\t}\n\n}\n\nexport default Activity;","import React, { Component } from 'react';\nimport Airtable from 'airtable';\nimport Moment from 'react-moment';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { Tab, Tabs } from 'react-bootstrap';\n\nimport Activity from './Activity';\n\nconst airTableKey = process.env.REACT_APP_AIRTABLE_API_KEY;\nconst airTableBase = process.env.REACT_APP_AIRTABLE_BASE;\nconst base = new Airtable({ apiKey: airTableKey }).base(airTableBase);\n\nexport default class Session extends Component {\n\t\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFetching: false,\n            session: null,\n            persons: [],\n            newPerson: '',\n            activeTab: props.activeTab || 1\n        };\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n\n    inputValue = '';\n\n    async componentDidMount() {\n    \tthis.loadData()\n        //this.timer = setInterval(() => this.fetchPersons(), 5000);\n    }\n\n    async loadData() {\n        await this.fetchSession(this.props.match.params.id)\n        await this.fetchPersons()        \n    }\n\n  \trender() {\n\t\tconst session = this.state.session\n\t\tconst persons = this.state.persons\n\n        let sessionInfo\n        let personInfo\n\n        if (session != null){\n            sessionInfo =\n            <Container>\n                <Row>\n                    <Col><br/>\n                        <Card>\n                          <Card.Body>\n                            <Card.Title>{session.fields.Name}</Card.Title>\n                            <Card.Subtitle className=\"mb-2 text-muted\"><Moment format=\"LLLL\">{session.fields.Start}</Moment></Card.Subtitle>\n                            <Card.Text>\n                              {session.fields.Notes}\n                            </Card.Text>\n                          </Card.Body>\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        }\n        if (session != null && persons.length > 0) {\n            personInfo =\n            <Container>\n                <Row>\n                    <Col>\n                        <br/>\n                        <Tabs activeKey={this.state.activeTab} onSelect={this.handleSelect}>\n                            <Tab eventKey={1} title=\"Register\">\n                                <br/>\n                                <ListGroup>\n                                    <ListGroup.Item>\n                                        <input value={this.state.newPerson} onChange={this.changeInputHandler} placeholder=\"New person...\" />\n                                        <Button variant=\"primary\" size=\"sm\" onClick={this.handleClick}>Add</Button>\n                                    </ListGroup.Item>\n                                    {persons.map(person => \n                                        <ListGroup.Item key={ person.id }>\n                                            <label><input \n                                                type=\"checkbox\" \n                                                defaultChecked={\n                                                    //calculate if person is already logged as attending\n                                                    (session != null) && session.fields.Attended != null ?  session.fields.Attended.includes(person.id) : false\n                                                }\n                                                onChange={() => this.handleChange(person.id, this.checked)}\n                                            />&nbsp;\n                                            { person.fields.Name }</label>\n                                        </ListGroup.Item> \n                                    )}\n                                    \n                                </ListGroup>\n\n                            </Tab>\n                            <Tab eventKey={2} title=\"Activities\"><br/>\n                                <Row>\n                                    {session.fields.Activities.map(activityId =>\n                                        <Col xs={6} key={ activityId } >\n                                            <Activity activityId={ activityId }></Activity><br/>\n                                        </Col>\n                                    )}\n                                </Row>\n                            </Tab>\n                        </Tabs>\n\n                        <br/>\n\n                    </Col>\n                </Row>\n            </Container>\n        }\n\n    \treturn (\n        \t<div>\n          \t\t<div>{sessionInfo}</div>\n                <div>{personInfo}</div>\n                <p>{this.state.isFetching ? 'Fetching data...' : ''}</p>\n        \t</div>\n    \t);\n  \t}\n\n    handleSelect(selectedTab) {\n        // The active tab must be set into the state so that\n        // the Tabs component knows about the change and re-renders.\n        this.setState({\n            activeTab: selectedTab\n        });\n    }\n\n  \tasync fetchSession(Id) {\n\t\tvar self = this;\n\t\tawait base('Session').find(Id, function(err, record) {\n\t\t    if (err) { console.error(err); return; }\n\t\t    self.setState({ isFetching: false, session: record })\n\t\t});\n  \t}\n\n    async fetchPersons() {\n        try {\n\t    \tthis.setState({isFetching: true})\n\t\t    await base('Person').select({ sort: [{field: \"Name\", direction: \"asc\"}], view: 'Grid view'})\n\t\t    .eachPage(\n\t\t      (persons, fetchNextPage) => {\n\t\t        this.setState({\n\t\t          isFetching: false,\n\t\t          persons\n\t\t        });\n\t\t        fetchNextPage();\n\t\t      }\n\t\t    );\n        } catch (e) {\n            this.setState({...this.state, isFetching: false});\n        }\n    }\n\n    handleChange(id, attended) {\n        const session = this.state.session\n        var array = []\n        if (session.fields.Attended != null){\n            array = session.fields.Attended\n        }       \n        var index = array.indexOf(id)\n        if (index >= 0) {\n            //yep - needs removing\n            array.splice(index, 1)\n        }\n        else {\n            //nope - needs adding\n            array = array.concat(id)\n        }\n        session.fields.Attended = array\n        this.setState({[session]: session})\n        this.updateSession(session.id, array)\n    }\n\n    changeInputHandler = event => {\n        this.inputValue = event.target.value\n        this.setState({ newPerson: this.inputValue })\n    };\n\n    handleClick = event =>  {\n        this.createPerson(this.inputValue)\n        this.setState({ newPerson: '' })\n        this.loadData()\n    }    \n\n    createPerson(personName) {\n        base('Person').create({\n          \"Name\": personName,\n\n        }, function(err, record) {\n          if (err) {\n            console.error(err);\n            return;\n          }\n        });\n    }\n\n\tupdateSession (sessionId, attended) {\n\t\tbase('Session').update(sessionId, {\n\t    \tAttended: attended\n\t    \t}, function(err, record) {\n\t    \tif (err) {\n\t      \t\tconsole.error(err);\n\t      \t\treturn;\n\t    \t}\n\t  \t});\n\t  \t\n\t}\n\n}\t","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nimport Home from './components/Home';\nimport Persons from './components/Persons';\nimport Sessions from './components/Sessions';\nimport Session from './components/Session';\n\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nclass App extends Component {\n\n  render() {\n    \n    return (\n      <Router>\n        <div>\n          <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">\n              <img\n                alt=\"\"\n                src=\"/logo.svg\"\n                width=\"30\"\n                height=\"30\"\n                className=\"d-inline-block align-top\"\n              />\n              {' RE:PLAY'}\n            </Navbar.Brand>\n            <Nav className=\"mr-auto\">\n              <Link to={'/'} className=\"nav-link\"> Home </Link>\n              <Link to={'/persons'} className=\"nav-link\">Persons</Link>\n              <Link to={'/sessions'} className=\"nav-link\">Sessions</Link>\n            </Nav>\n          </Navbar>          \n          <Switch>\n              <Route exact path='/' component={Home} />\n              <Route path='/persons' component={Persons} />\n              <Route path='/sessions' component={Sessions} />\n              <Route path='/session/:id' component={Session} />\n          </Switch>\n        </div>\n      </Router>\n\n\n \n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Import Bootstrap CSS and JS\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.js';\n\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render((\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n), document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}